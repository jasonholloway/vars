# out: firstName age
echo firstName=bob$(date +%s)
echo age=70

#++++++++++++++++++++++++
# out: dog
echo dog=¦Bert¦Rex¦Biter¦Nobby



#++++++++++++++++++++ map
dog > food
;	Bert > bones
;	Rex > biscuits
;	* > meat



#+++++++++++++++++++++++
# n: sayHello
# in: dog
echo Hello, ${dog}!


#+++++++++++++++++++++++
# n: greet
# in: firstName
echo yo, $firstName


#+++++++++++++++++++
# n: sayMoo
# in: cowName breed
# pin: breed=Hereford
echo "${cowName}: Moo! (${cowName}'s breed is _${breed}_!)"



#+++++++++++++++++++++
# out: cowName
@bind cowName ¦Daisy¦Betsy¦Kev


#+++++++++++++++++++++
# n: less
# out: blah
less /etc/hosts >"$(tty)"

#+++++++++++++++++++++
# n: vim
# out: blah
vim ~/.vars/out >"$(tty)"

#+++++++++++++++++++++
# n: curl
# in: cowName
@curl \
  -X POST localhost:8080 \
	-H "Content-Type: application/x-www-form-urlencoded" \
	--data-urlencode "client_id=$client" \
	--data-urlencode "client_secret=$_secret" \
	--data-urlencode "grant_type=$grantType" \
	--data-urlencode "apikey=$_apiKey" \
	--data-urlencode "scopes=$scope"


# #+++++++++++++++++++
# # n: tty1
# # in: dog age
# @tty 'echo DOG1 $dog $age $(tty)' 
# @tty 'echo DOG2 $dog $age $(tty) >&2' 
# @tty 'echo DOG3 $(@curl google.com) >&2' 


# #+++++++++++++++++++
# # n: tty_noContext
# echo hello >&2
# @tty 'echo HELLO! $(tty) >&2' 



#+++++++++++
# out: prefix
@bind prefix "www."

#+++++++++++
# out: site
@bind site ¦google¦sorted¦gerbils


#++++++++++++
# in: prefix site
# out: url
@bind url ${prefix}${site}.com


#++++++++++++
# in: url
# out: ip
# cache
ip=$(dig +short -4 $url)
@bind ip $ip
@cacheTill 9999999999999


#+++++++++++
# pin: site=sorted
# in: ip
# out: sortedIp
@bind sortedIp $ip

#+++++++++++
# pin: site=google
# in: ip
# out: googleIp
@bind googleIp $ip


#++++++++++
# in: sortedIp googleIp
# out: bothIps
@bind bothIps "sorted:$sortedIp google:$googleIp"


#++++++++++
# in: sortedIp:ip{site=sorted} googleIp:ip{site=google}
# out: bothIpsIdeal
@bind bothIps "sorted:$sortedIp google:$googleIp"




#
# the ideal way of specifying pins requires parsing and understanding at the point of block-reading
# rather than in the middle of deducing
# such a block would be read by blocks.sh
# which would have to synthesize blocks named uid:'ip{site=sorted}' and uid:ip{site=google}
#
#
#
#


